# www.example.com HTTPS

server {
    proxy_cache my_cache;
    app_protect_enable on; # This is how you enable NGINX App Protect in the relevant context/block
    app_protect_policy_file "/etc/nginx/NginxDefaultPolicy.json"; # This is a reference to the policy file to use. If not defined, the default policy is used
    app_protect_security_log_enable on; # This section enables the logging capability
    app_protect_security_log "/etc/app_protect/conf/log_default.json" syslog:server=elk-stack:5144; # This is where the remote logger is defined in terms of: logging options (defined in the referenced file), log server IP, log server port
 
    listen 443 ssl;
    server_name www2.example.com;
    ssl_certificate /etc/ssl/example.com.crt;
    ssl_certificate_key /etc/ssl/example.com.key;
    location / {
        proxy_pass http://nginx_hello;
        
        # Default is HTTP/1, keepalive is only enabled in HTTP/1.1
        proxy_http_version 1.1;

        # Remove the Connection header if the client sends it,
        # it could be "close" to close a keepalive connection
        proxy_set_header Connection "";

        health_check interval=2s fails=1 passes=5 uri=/ match=statusok;
    }

    location /old-url {
        return 301 https://$host/new-url;
    }

   location  ~* \.(png|jpg|jpeg|gif|ico)$ {
        proxy_cache my_cache;
        proxy_ignore_headers Cache-Control;
        proxy_ignore_headers Expires;
        proxy_cache_valid any 1h;
        proxy_cache_methods GET HEAD POST;
        proxy_pass http://nginx_hello;
        add_header X-Cache-Status $upstream_cache_status;
        add_header Cache-Control "public";
        add_header CC-X-Request-ID $request_id;

        # purge cache
        proxy_cache_purge $purge_method;
        }
}

match statusok {
       # just check for 200 ok
       status 200;
}

