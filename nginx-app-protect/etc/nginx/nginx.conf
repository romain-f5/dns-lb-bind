user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log info;
pid        /var/run/nginx.pid;

# Load Modules
#load_module modules/ngx_http_modsecurity_module.so; # Modsecurity WAF
#load_module /etc/nginx/modules/ngx_http_js_module.so; # NGINX Javascript
load_module modules/ngx_http_app_protect_module.so; # NGINX App Protect


events {
    worker_connections  1024;
}

http {
    # added for challenge - defines the cache location
    proxy_cache_path /var/cache/nginx keys_zone=my_cache:10m;

    # added for challenge - defines a list of addresses that can initiate cache purge
    geo $purge_allowed {
        default        0;
        10.0.0.1       1;
        192.169.0.0/24 1;
        172.18.0.0/24  1;
        }

    # added for challenge - defines method for cache purge (used in the image location)
    map $request_method $purge_method {
        PURGE $purge_allowed;
        default 0;
        }
   
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_u_agent" "$http_x_forwarded_for" "$request_id"';

    # NGINX Plus Additional NGINX Metrics
    log_format  main_ext  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" "$http2" '
                      '"$http_user_agent" "$http_x_forwarded_for" '
                      '"$host" sn="$server_name" '
                      'rt=$request_time '
                      'ua="$upstream_addr" us="$upstream_status" '
                      'ut="$upstream_response_time" ul="$upstream_response_length" '
                      'cs=$upstream_cache_status $request_id' ;

    # access_log  /var/log/nginx/access.log  main; # Default
    access_log  /var/log/nginx/access.log  main_ext; # NGINX Plus Additional NGINX Metrics

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    include /etc/nginx/conf.d/*.conf;    # Regular web traffic
}


# TCP/UDP proxy and load balancing block
#
stream {

    # match statement to get the healthcheck configured
    # the send string sends a request for "www.example.com"
    # the expect parses the response for "ns2"
    match dns_lookup {
        send \x44\x1c\x01\x20\x00\x01\x00\x00\x00\x00\x00\x01\x03\x77\x77\x77\x07\x65\x78\x61\x6d\x70\x6c\x65\x03\x63\x6f\x6d\x00\x00\x01\x00\x01\x00\x00\x29\x10\x00\x00\x00\x00\x00\x00\x00;
        expect ~* \x03\x6e\x73\x32\xc0;
    }
    # the zone configuration is mandatory to use in this case - this sets up a memory zone for the upstream
    upstream dns_servers {
        zone dns_zone 64k;
        server bind-01:53;
    }

    # the health checks are not super aggressive but seem to do the job
    server {
        listen 53;
        listen 53 udp;
        proxy_pass dns_servers;
        health_check match=dns_lookup interval=20 fails=2 passes=2 udp;
        error_log /var/log/nginx/dns.log info;
    }
}

# vim: syntax=nginx
